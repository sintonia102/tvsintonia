<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google TV App Plus</title>

    <!-- Importación de la librería hls.js para reproducir streams HLS -->
    <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>

    <!-- Importación de la fuente Roboto de Google Fonts para un mejor look & feel -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap" rel="stylesheet">

    <style>
        /* Reseteo básico y fondo mejorado */
        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            /* Gradiente radial sutil en lugar de negro sólido */
            background: radial-gradient(ellipse at center, #2c2c2c 0%, #000000 100%);
            font-family: 'Roboto', sans-serif;
        }

        /* El reproductor de video sigue ocupando toda la pantalla */
        #videoPlayer {
            width: 100vw;
            height: 100vh;
            object-fit: cover;
            background-color: transparent; /* Permite ver el gradiente del body si el video no carga */
        }

        /* --- Mejoras Visuales del Overlay de Canal --- */
        #channel-info {
            position: absolute;
            top: 8%; /* Posicionado más arriba, estilo TV */
            left: 50%;
            transform: translateX(-50%) scale(0.95); /* Posición inicial para la animación */
            background-color: rgba(20, 20, 20, 0.85);
            color: white;
            padding: 15px 40px;
            border-radius: 8px;
            font-size: 42px;
            font-weight: 500;
            /* Sombra de texto para mejorar legibilidad sobre cualquier video */
            text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.7);
            z-index: 1000;
            opacity: 0;
            pointer-events: none;
            /* Transición suave para la animación de entrada/salida */
            transition: opacity 0.4s ease-out, transform 0.4s ease-out;
        }

        /* Clase para mostrar el indicador con animación */
        #channel-info.visible {
            opacity: 1;
            transform: translateX(-50%) scale(1);
        }

        /* --- Indicador de Carga (Spinner) --- */
        .loader {
            position: absolute;
            top: 50%;
            left: 50%;
            width: 60px;
            height: 60px;
            border: 7px solid #f3f3f3;
            border-top: 7px solid #3498db; /* Color azul para el spinner */
            border-radius: 50%;
            z-index: 1001; /* Por encima de todo */
            /* Animación de giro */
            animation: spin 1s linear infinite;
            transform: translate(-50%, -50%);
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        .loader.visible {
            opacity: 1;
        }

        /* Definición de la animación de giro */
        @keyframes spin {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }
    </style>
</head>
<body>

    <!-- Elemento de video -->
    <video id="videoPlayer" autoplay></video>

    <!-- Indicador de Carga (Spinner) -->
    <div id="loader" class="loader"></div>

    <!-- Overlay de información del canal -->
    <div id="channel-info">
        <span id="channel-name"></span>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // --- 1. CONFIGURACIÓN INICIAL ---
            const videoElement = document.getElementById('videoPlayer');
            const channelInfo = document.getElementById('channel-info');
            const channelNameElement = document.getElementById('channel-name');
            const loader = document.getElementById('loader');

            const channels = [
                {
                    name: "SAE Canal",
                    url: "https://sae11.playlist.live-video.net/v1/playlist/CssFNDy9bTZb6rNhCr7SXbXJvfPPGhhLJVHhFMHXnYcbFQeQrgOSZD-GUrCziHoiFzqfVt4hu9BHqn0nW6-BRY_3lIMZbFUqCjkOHi7n0gWrknY_1l2_Rt7lrL4l-Z9gnNoxRRQW1Qt8Q5Bgk9rF48fZ6qMyOREPSrT-R4T35Ew9eUVCb69wS2MM6ydq3EQ0YDQrVWvqllYRZgD6gn44NtMvq3QGYEo6ixdNbA3taq63fPQVkGl_hHxEnsfB6RWjmehNrkGxQ5ZdGH7M4jCDXfjUq96_vzyTmEAD1ipPLhO8p0nkFPS2izspQdeFO92tOF6y4OOIGGexh7cb9kp0dFdf4OMg8Ub9xy5FQ8sq_nvC50Jjck3Z60yNoQ5elZrrd8a1ExIK8EVEL5i9SdjJexH-sSjaOSwiXlC0xFq27_sPobcqROER_93LmOzAMvpJT49gIxerwNVTXTwQf7yFzeU-Iu1tvhXG7amP_Anp22wijZX1quEGkbS55x_WIeNd35kgOGgF3zve8N7LasLsC0qVoUWAOOg0bUcrSYN-yDA7hwp5xfubVAEu9gVCLT-l2kwsF4QhgrfYCiR8rgzUwRl-EqgDXRvzVUYPzZ12K_Wb4xrxw7ye9unL46T-lfTMQ4Hc-gjOUasKTnxKRRsqF5Xgy1Dp9GLuvlEF3m0lvJ7_UQof71cYkE_dvRwhuf3SCIe7OPA5UpOlg7YbYbYrCSHgOWAxAEFCY2lu1yadQYQQjzvrRdXEyv6gKLbWNT7qwStWpGwdG9LHCWg9tNVWgyXetHc7lEJH-59gP5460KFYG5JwukWb03zdGPzaq9d9eIBcc3O5LAhPNAajFWW7MKl6XZ1z7GRRBoHDoPeCdzs19nGPgiqWR4oJ3Ef5i_TAXapxZyK7fYpDorbnid1MOlTaEs4F9cQqhk37BFa_-_sDIzJhlazzKnKxCVZfZRoM-30Qe6_BHNx1Kgi4IAEqCXVzLWVhc3QtMjDgDA.m3u8",
                    type: "hls"
                },
                {
                    name: "Sintonía TV",
                    url: "https://stream-cdn-iad3.vaughnsoft.net/play/live_sintonia.flv",
                    type: "flv"
                }
            ];

            let currentChannelIndex = 0;
            let hls = null;
            let channelInfoTimeout;

            // --- 2. LÓGICA DE REPRODUCTOR Y UI ---

            function showLoader() { loader.classList.add('visible'); }
            function hideLoader() { loader.classList.remove('visible'); }
            
            function showChannelInfo(name, number) {
                if (channelInfoTimeout) {
                    clearTimeout(channelInfoTimeout);
                }
                
                let displayText = `${number}. ${name}`;
                if (name.includes("no compatible")) {
                    displayText = `${number}. ${name}`;
                }

                channelNameElement.textContent = displayText;
                channelInfo.classList.add('visible');

                channelInfoTimeout = setTimeout(() => {
                    channelInfo.classList.remove('visible');
                }, 3500); // Un poco más de tiempo en pantalla
            }

            function loadChannel(index) {
                const channel = channels[index];
                const channelNumber = index + 1;
                showChannelInfo(channel.name, channelNumber);
                showLoader();

                if (hls) {
                    hls.destroy();
                    hls = null;
                }

                if (channel.type === 'hls' && Hls.isSupported()) {
                    hls = new Hls({
                        // Empieza a cargar el video un poco antes para un inicio más rápido
                        fragLoadingMaxRetry: 4,
                        manifestLoadingMaxRetry: 4
                    });
                    hls.loadSource(channel.url);
                    hls.attachMedia(videoElement);
                    hls.on(Hls.Events.ERROR, (event, data) => {
                        if (data.fatal) {
                            console.error('Error fatal de HLS:', data.type, data.details);
                            hideLoader();
                        }
                    });
                } else if (channel.type === 'flv') {
                    console.warn("Intentando cargar FLV. Es muy probable que no funcione.");
                    videoElement.src = channel.url;
                    showChannelInfo(`${channel.name} (Formato no compatible)`, channelNumber);
                } else {
                    console.error("HLS no es soportado en este navegador.");
                    showChannelInfo("Error: HLS no soportado", channelNumber);
                    hideLoader();
                }
            }

            // --- 3. MANEJO DE EVENTOS ---
            
            // Eventos del reproductor para manejar el spinner
            videoElement.addEventListener('playing', hideLoader);
            videoElement.addEventListener('waiting', showLoader);
            videoElement.addEventListener('error', () => {
                hideLoader();
                console.error("Error en el elemento de video.");
            });


            function handleRemoteControl(e) {
                const key = e.key || e.keyCode;
                let newIndex = currentChannelIndex;
                const totalChannels = channels.length;

                switch (key) {
                    case 'ArrowUp': case 'ChannelUp': case 33:
                        newIndex = (currentChannelIndex + 1) % totalChannels;
                        break;
                    
                    case 'ArrowDown': case 'ChannelDown': case 34:
                        newIndex = (currentChannelIndex - 1 + totalChannels) % totalChannels;
                        break;
                    
                    default:
                        return;
                }
                
                e.preventDefault();

                if (newIndex !== currentChannelIndex) {
                    currentChannelIndex = newIndex;
                    loadChannel(currentChannelIndex);
                }
            }

            document.addEventListener('keydown', handleRemoteControl);

            // --- 4. INICIO DE LA APLICACIÓN ---
            loadChannel(currentChannelIndex);
        });
    </script>

</body>
</html>
